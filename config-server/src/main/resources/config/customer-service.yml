server:
  port: 8082
  error:
    include-message: always
  forward-headers-strategy: framework

logging:
  level:
    root: INFO
    com.banking: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

api:
  common:
    version: 1.0.0
    title: Customer Service API
    description: Customer service API for operations pertaining to bank customers
    termsOfService: https://smartbear.com/terms-of-use/
    license: MIT Licence
    licenseUrl: https://mit-license.org/
    externalDocDesc: N/A
    externalDocUrl: N/AL
    contact:
      name: Aaron MAJAMBO
      url: https://github.com/aaronmaj
      email: aaronmajb@gmail.com
  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified customerid does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  customers:
    get-all:
      description: Returns the list of all customers recorded by the system
      notes: |
        # Normal response
        If customer entities are found the method will return information regarding each customer:
        1. Customer basic information
        1. Customer type (Individual, Corporate, etc)
        1. Customer gender(Male,Female)
        1. Customer ID type(National ID, Passport, Service Documents )
        # Expected partial and error responses
        1. If no customer information is found, an empty list will be returned

    get-customer-by-id:
      description: Returns a customer information for the specified customer id
      notes: |
        # Normal response
        If the requested customer id is found the method will return information regarding:
        1. Customer basic information
        1. Customer type (Individual, Corporate, etc)
        1. Customer gender(Male,Female)
        1. Customer ID type(National ID, Passport, Service Documents )
        # Expected partial and error responses
        1. If no customer information is found, a **404 - Not Found** error will be returned
        1. In case of missing information (non mandatory) during registration, a partial response will be returned
    create-customer:
      description: Creates a customer object
      notes: |
        # Normal response
        The customer information posted to the API will be stored in a dedicated customer entity.
        # Expected error responses
        1. If a customer with the same customerId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
    update-customer:
      description: Update a customer for a given customerId
      notes: |
        # Normal response
        The entity for customer information related to the specified customerId will updated.
        # Expected error responses
        If no customer information is found, a **404 - Not Found** error will be returned

    upload-image:
      description: Uploads an image(photo) for a given customerId
      notes: |
        # Normal response
        The entity for customer information related to the specified customerId will updated with the image(photo).
        # Expected error responses
        If no customer information is found, a **404 - Not Found** error will be returned

    upload-contract:
      description: Uploads contract document for a given customerId
      notes: |
        # Normal response
        The entity for customer information related to the specified customerId will updated with the image(photo).
        # Expected error responses
        If no customer information is found, a **404 - Not Found** error will be returned
    upload-cert:
      description: Uploads a customer document(ID, Passport) for a given customerId
      notes: |
        # Normal response
        The entity for customer information related to the specified customerId will updated with the image(photo).
        # Expected error responses
        If no customer information is found, a **404 - Not Found** error will be returned

    delete-customer:
      description: Deletes a customer for a given customer id
      notes: |
        # Normal response
        The entity for customer information related to the specified customerId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non-existing product will return **204 No Content**.


springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.banking.customer
  pathsToMatch: /**
  cache.disabled: true

spring:
  jpa:
    hibernate:
      ddl-auto: update # none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy

    database: POSTGRESQL
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    defer-datasource-initialization: true
    show-sql: true
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        use_sql_comments: true
  datasource:
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
    continue-on-error: false

  database:
    driverClassName: org.postgresql.Driver
  cloud:
    loadbalancer:
      ribbon:
        enabled: false

management.endpoints.web.exposure.include: "*"
management.endpoints.enabled-by-default: false
management.endpoint.health.enabled: true
management.endpoint.health.show-details: always
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/


resilience4j.circuitbreaker:
  instances:
    detailService:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      ringBufferSizeInHalfOpenState: 3
      waitDurationInOpenState: 10s
      failureRateThreshold: 50
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
    customerService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 6
      ringBufferSizeInHalfOpenState: 4
      waitDurationInOpenState: 20s
      failureRateThreshold: 60

resilience4j.timelimiter:
  instances:
    detailService:
      timeoutDuration: 2s

resilience4j.ratelimiter:
  instances:
    detailService:
      limitForPeriod: 5
      limitRefreshPeriod: 5000
      timeoutDuration: 1000ms

resilience4j.retry:
  instances:
    retryDetailService:
      maxRetryAttempts: 5
      waitDuration: 10000
      retry-exceptions:
        - java.util.concurrent.TimeoutException

resilience4j.bulkhead:
  instances:
    bulkheadDetailService:
      maxWaitDuration: 2ms
      maxConcurrentCalls: 20


resilience4j.thread-pool-bulkhead:
  instances:
    bulkheadDetailService:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

keycloak.realm: banking-realm
keycloak.auth-server-url: http://localhost:8180/auth
keycloak.ssl-required: external
keycloak.resource: banking-service #client ID
keycloak.credentials.secret: 5e6920b5-9385-4095-89f8-dab6db37e986 #client secret
keycloak.use-resource-role-mappings: true
keycloak.bearer-only: true

spring.cloud.stream.bindings.output.destination: custChangeTopic
spring.cloud.stream.bindings.output.content-type: application/json
spring.cloud.stream.kafka.binder.zkNodes: localhost
spring.cloud.stream.kafka.binder.brokers: localhost

spring.zipkin.baseUrl: http://localhost:9411
spring.sleuth.sampler.probability: 1.0
---
spring.config.activate.on-profile: docker

server.port: 8082
keycloak:
  auth-server-url: http://keycloak:8180/auth
spring.zipkin.baseUrl: http://zipkin:9411