server:
  port: 8081
  error:
    include-message: always
  forward-headers-strategy: framework

logging:
  level:
    root: INFO
    com.banking: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# API documentation
api:
  common:
    version: 1.0.0
    title: Account Service API
    description: Account service API for operations pertaining to bank accounts
    termsOfService: N/A
    license: MIT Licence
    licenseUrl: https://mit-license.org/
    externalDocDesc: N/A
    externalDocUrl: N/AL
    contact:
      name: Aaron MAJAMBO
      url: https://github.com/aaronmaj
      email: aaronmajb@gmail.com
  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the account for specified account number does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  accounts:
    find-all:
      description: Returns the list of all accounts recorded by the system
      notes: |
        # Normal response
        If account entities are found the method will return information regarding each account:
        1. Account basic information
        1. Account type (CHECKING,SAVINGS,LOAN,CERTIFICATE_OF_DEPOSIT)
        1. Account category (INDIVIDUAL, JOINT, INDIVIS)
        1. Account status (OPEN,ACTIVE,DORMANT,INACTIVE, BLOCKED,CLOSED)
        1. Brach code where the account was created
        1. Customer id associated with the account
        1. Currency (BIF,USD,EUR,GBP)
        # Expected partial and error responses
        1. If no account information is found, an empty list will be returned

    get-account-by-account-number:
      description: Returns an account information for the specified account number
      notes: |
        # Normal response
        If the requested account  is found the method will return information regarding:
        1. Account basic information
        1. Account type (CHECKING,SAVINGS,LOAN,CERTIFICATE_OF_DEPOSIT)
        1. Account category (INDIVIDUAL, JOINT, INDIVIS)
        1. Account status (OPEN,ACTIVE,DORMANT,INACTIVE, BLOCKED,CLOSED)
        1. Brach code where the account was created
        1. Customer id associated with the account
        1. Currency (BIF,USD,EUR,GBP)
        # Expected partial and error responses
        1. If no account is found for the given account number, a **404 - Not Found** error will be returned
        1. In case of missing information (non mandatory) during registration, a partial response will be returned
    create-account:
      description: Creates an account object
      notes: |
        # Normal response
        The account information posted to the API will be stored in a dedicated account entity.
        # Expected error responses
        1. If an account with the same account as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
    update-account:
      description: Update an account for a given account number
      notes: |
        # Normal response
        The account information related to the specified account number will updated.
        # Expected error responses
        If no account is found, a **404 - Not Found** error will be returned

    get-customer-details:
      description: Displays the personal details for the account holder
      notes: |
        # Normal response
        The Personal Details for account holder.
        # Expected error responses
        If no account is found, a **404 - Not Found** error will be returned

    delete-account:
      description: Deletes an account for a given account number
      notes: |
        # Normal response
        The account related to the specified account number will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non-existing product will return **200 Ok**.



springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.banking.account
  pathsToMatch: /**
  cache.disabled: true

spring:
  jpa:
    hibernate:
      ddl-auto: update # none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy

    database: POSTGRESQL
    defer-datasource-initialization: true
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        se_sql_comments: true

  datasource:
    url: jdbc:postgresql://localhost:5432/banking_db
    username: dbtest
    password: dbtest
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
    continue-on-error: false
    hikari.initializationFailTimeout: 60000

  database:
    driverClassName: org.postgresql.Driver
  cloud:
    loadbalancer:
      ribbon:
        enabled: false

management.endpoints.web.exposure.include: "*"
management.endpoints.enabled-by-default: false
management.endpoint.health.enabled: true
management.endpoint.health.show-details: always
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/


resilience4j.circuitbreaker:
  instances:
    detailService:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      ringBufferSizeInHalfOpenState: 3
      waitDurationInOpenState: 10s
      failureRateThreshold: 50
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
    customerService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 6
      ringBufferSizeInHalfOpenState: 4
      waitDurationInOpenState: 20s
      failureRateThreshold: 60

resilience4j.timelimiter:
  instances:
    detailService:
      timeoutDuration: 2s

resilience4j.ratelimiter:
  instances:
    detailService:
      limitForPeriod: 5
      limitRefreshPeriod: 5000
      timeoutDuration: 1000ms

resilience4j.retry:
  instances:
    retryDetailService:
      maxRetryAttempts: 5
      waitDuration: 10000
      retry-exceptions:
        - java.util.concurrent.TimeoutException

resilience4j.bulkhead:
  instances:
    bulkheadDetailService:
      maxWaitDuration: 2ms
      maxConcurrentCalls: 20


resilience4j.thread-pool-bulkhead:
  instances:
    bulkheadDetailService:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

keycloak.realm: banking-realm
keycloak.auth-server-url: http://localhost:8180/auth
keycloak.ssl-required: external
keycloak.resource: banking-service #client ID
keycloak.credentials.secret: b5460e47-e2b0-4791-b927-25be79148b86 #client secret
keycloak.use-resource-role-mappings: true
keycloak.bearer-only: true

#security.oauth2.resource.userInfoUri: http://authenticationservice:8082/user

spring.cloud.stream.bindings.inboundOrgChanges.destination: custChangeTopic
spring.cloud.stream.bindings.inboundOrgChanges.content-type: application/json
spring.cloud.stream.bindings.inboundOrgChanges.group: accountGroup
spring.cloud.stream.kafka.binder.zkNodes: kafka
spring.cloud.stream.kafka.binder.brokers: kafka

spring.zipkin.baseUrl: http://localhost:9411
spring.sleuth.sampler.percentage: 1
redis:
  server: redis
  port: 6379
---
spring.config.activate.on-profile: docker

server.port: 8081
keycloak:
  auth-server-url: http://keycloak:8180/auth
spring.zipkin.baseUrl: http://zipkin:9411
